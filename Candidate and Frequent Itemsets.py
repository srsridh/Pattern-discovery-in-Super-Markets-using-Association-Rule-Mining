import numpy
import pandas as pd
import itertools
from itertools import combinations
from numpy import array


#This function block does preprocessing on the sparse data matrix like removing all rows having 0's and generates
#Candidate itemset1, candidate itemset1 support, frequent itemset1, frequent itemset1 support
def main(data):
    global k, candidate_c1,frequent_c1,candidate_c2,frequent_c2
    data = data.loc[(data != 0).any(axis=1)]
    length = len(data)
    data.loc[-1] = data.sum(axis=0)
    #Candidate list one having all items and it's support
    candidate_ldict = dict(zip(data.ix[:, 0:length], data.loc[-1]))
    candidate_c1 += len(candidate_ldict.keys())
    candidate_c2 += len(candidate_ldict.keys())
    #Frequent itemset 1 having all items and it's support
    frequent_ldict = {k: v for k, v in candidate_ldict.items() if v > minsup}
    frequent_l1s = frequent_ldict.values()
    # extracting only the items from Frequent itemset 1
    frequent_l1 = frequent_ldict.keys()
    frequent_c1 += len(candidate_ldict.keys())
    frequent_c2 += len(candidate_ldict.keys())
    data = data.drop(data.index[len(data) - 1])
    #Find all possible combinations of items in F1 for candidate itemset 2
    candidate_l2 = list(combinations(frequent_l1, 2))
    #candidate_l2s has the support count for candidate itemset 2
    com_columns = data.columns.tolist()
    candidate_l2s = []
    for f in  candidate_l2:
        d = data.loc[data[f[0]] == 1]
        data3 = pd.DataFrame(d)
        for r in range(1,len(f)):
            d2 = data.loc[data[f[r]] == 1]
            data3 = pd.merge(data3, d, on=com_columns, how='inner')
        candidate_l2s.append(len(data3.index))
    # this is my candidate itemset 2 as a pandas dataframe
    data2 = pd.DataFrame({'col1':  candidate_l2})
    data2['col2'] = candidate_l2s
    # creating frequent itemset 2 by checking minsup
    data2 = data2[data2.col2 > minsup]
    #all items in frequent itemset2
    frequent_l2 = data2['col1'].tolist()
    frequent_l2s = data2['col2'].tolist()
    # Calling the fucntion to implement fk-1 with f1
    fk1(frequent_l1,frequent_l2,k)
    print("----------------------------------------------------")
    # Calling the function to implement fk1 with fk1
    f_k_1(frequent_l2,k)
    return

#Function block to implement fk-1 with f1
def fk1(frequent_l1,frequent_l2,k):
    global  candidate_c1,frequent_c1
    k+= 1
    candidate_l = []
    for i in frequent_l2:
        for j in frequent_l1:
            dummy = []
            dummy.extend(i)
            if j not in dummy:
                dummy.append(j)
            else:
                break
            candidate_l.append(dummy)
    candidate_c1 += len(candidate_l)
    com_columns = data.columns.tolist()
    candidate_ls = []
    for f in candidate_l:
        d = data.loc[data[f[0]] == 1]
        data3 = pd.DataFrame(d)
        for r in range(1, len(f)):
            d2 = data.loc[data[f[r]] == 1]
            data3 = pd.merge(data3, d2, on=com_columns, how='inner')
        candidate_ls.append(len(data3.index))
    #Putting all candidate list 3 in  a dataframe
    candidate_data = pd.DataFrame({'col1': candidate_l})
    candidate_data['col2'] = candidate_ls
    #print("My candidate is:", candidate_data)
    frequent_l,frequent_ls = prune(candidate_data)
    frequent_c1 += len(frequent_l)
    if len(frequent_l) <= 1  or frequent_l == frequent_l2 or k<=k_max:
        if len(frequent_l)>0:
            print("frequent item list fk1 with f1:", frequent_l)
            print("Total number of candidate items generated by fk1 with f1 :: ", candidate_c1)
            print("Total number of frequent items generated by fk1 with f1 :: ", frequent_c1)
        else:
            print("frequent item list fk1 with f1:", frequent_l)
            print("Total number of candidate items generated by fk1 with f1 :: ", candidate_c1)
            print("Total number of frequent items generated by fk1 with f1 :: ", frequent_c1)
        return
    else:
        fk1(frequent_l1,frequent_l,k)
        return

#Function block to prune and generate frequent itemset
def prune(candidate_data):
    candidate_data = candidate_data[candidate_data.col2 > minsup]
    frequent_l = candidate_data['col1'].tolist()
    frequent_ls = candidate_data['col2'].tolist()
    return frequent_l,frequent_ls

#Function block to implement fk-1 with fk-1
def f_k_1(frequent_l2,k):
    global  candidate_c2,frequent_c2
    k +=1
    l =[]
    for l1 in frequent_l2:
        ind = frequent_l2.index(l1)
        for j in range(ind +1, len(frequent_l2)):
            l2 = frequent_l2[j]
            if l1[0:k-2] == l2[0:k-2]:
                l3 = []
                l3 = l1
                l3 = set(l3 + l2)
                if list(l3) in l:
                    continue
                else:
                    if len(l3) == k:
                        l.append(list(l3))
    candidate_c2 += len(l)
    com_columns = data.columns.tolist()
    candidate_ls = []
    for f in l:
        d = data.loc[data[f[0]] == 1]
        # print("d in pandas")
        data3 = pd.DataFrame(d)
        for r in range(1, len(f)):
            d2 = data.loc[data[f[r]] == 1]
            data3 = pd.merge(data3, d2, on= com_columns, how='inner')
        candidate_ls.append(len(data3.index))
    candidate_data = pd.DataFrame({'col1': l})
    candidate_data['col2'] = candidate_ls
    frequent_l,frequent_ls = prune(candidate_data)
    frequent_c2 += len(frequent_l)
    if len(frequent_l) <= 0 or frequent_l==frequent_l2 or k<=k_max:
        if len(frequent_l) >0:
            print("frequent item of fk1 with fk1 list is:", frequent_l)
            print("Total number of candidate items generated by fk1 with fk1 :: ", candidate_c1)
            print("Total number of frequent items generated by fk1 with fk1 :: ", frequent_c1)
        else:
            print("frequent item of fk1 with fk1 list is:", frequent_l2)
            print("Total number of candidate items generated by fk1 with fk1 :: ", candidate_c1)
            print("Total number of frequent items generated by fk1 with fk1 :: ", frequent_c1)
        return
    else:
        f_k_1( frequent_l,k)
    return

#Program begins here

x = input("Kindy enter the number of rows for sparse matrix:")
x = int(x)
y = input("Kindly enter the number of columns for sparse matrix:")
y = int(y)
minsup = input("Kindly enter the minimum support value:")
misnup = int(minsup)
minsup = minsup*x/100
data = pd.DataFrame(numpy.random.choice([0, 1], size=(x, y), p=[.6, .4]))
candidate_c1 = 0
candidate_c2 = 0
frequent_c1 = 0
frequent_c2 = 0
k = 0
k_max = 4
#This is my main function
main(data)

